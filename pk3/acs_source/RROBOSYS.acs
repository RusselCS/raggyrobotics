#library "RROBOENZ"

#include "zcommon.acs"

#include "RROBCOMM.acs"
#include "CROCFUNC.acs"

int maxPlayer = 0;
int pickTime;
int totalPlayers = 0;

int roboenzaMode = ROBOSTATE_PREGAME;

// Overall game management scripts here.
// Uses `patientZero` world variable from `RROBCOMM.acs`.

script "RROBOENZ_ENTER" ENTER
{
    if(!canRoboenza())
        terminate;

    maxPlayer = max(maxPlayer, PlayerNumber()+1);
    ResetCustomDataToDefault("Infections", PlayerNumber());
    ResetCustomDataToDefault("Strain", PlayerNumber());
    CallACS0("RROBENZ_PLAYERSTART");
    
    CallACS2("core_invulnerableplayer", 0, true);
    while(!pickTime)
        delay(1);
    CallACS2("core_invulnerableplayer", 0, false);
}

script "RROBENZ_RESPAWN" RESPAWN
{
    CallACS0("RROBENZ_PLAYERSTART");
    delay(1);
    if(canRoboenza()) {
        CallACS1("RROBOENZ_INFECT", PlayerNumber());
    }
}

script "RROBOENZ_RUNSYSTEM" OPEN
{
    if(!canRoboenza())
        terminate;

    roboenzaMode = ROBOSTATE_PREGAME;
    delay(1);
    CallACS2("core_bossmusicstate", RBNZ_BMSF_SETVAL, RBNZ_BMS_DISABLE);
    delay(35*3);
    totalPlayers = PlayerCount();

    int alphaCount = clamp(totalPlayers / GetCvar("rroboenz_sv_alphathreshold") + 1, 1, GetCvar("rroboenz_sv_maxalphas"));

    infectAlpha(alphaCount);
    roboenzaMode = ROBOSTATE_INPROGRESS;

    delay(16);

    bool musicChanged = false;
    bool buffGiven = false;

    int threshold = 0.34;

    while(true) {

        int survCount = playerCountTeam(TEAM_SURVIVOR);
        int infcCount = playerCountTeam(TEAM_INFECTED);

        if(survCount == 1) {
            int ratio = FixedDiv(infcCount, totalPlayers);

            if(!buffGiven) {
                buffGiven = true;
                if(ratio >= 0.67) {
                    CallACS1("RROBOENZ_GIVEFRENZY", 2);
                } else if(ratio >= 0.34) {
                    CallACS1("RROBOENZ_GIVEFRENZY", 1);
                }
            }

            if(!musicChanged) {
                musicChanged = true;
                if(ratio >= 0.34) {
                    CallACS2("core_bossmusicstate", RBNZ_BMSF_SETINTENSE, true);
                } else {
                    CallACS2("core_bossmusicstate", RBNZ_BMSF_SETVAL, RBNZ_BMS_BOSS);
                    SetMusic("RBNZAINT");
                }
            }
        }

        if(buffGiven) { // if one of the zombies gets cured, and then someone else gets infected, may as well...
            if(survCount >= 2) {
                buffGiven = false;
            }
        }

        // [Russ] This is gonna get annoying to read back on in the server log
        // Aaaaaaand will probably flag TSPG mods or something? idk.
        // But I need to know what's going on, so I'm just gonna. Spam logs.
        if(GetTeamProperty(TEAM_SURVIVOR, TPROP_WinCount) != survCount) {
            ChangeTeamScore(TEAM_SURVIVOR, SCORE_WINS, survCount);
        }

        if(GetTeamProperty(TEAM_INFECTED, TPROP_WinCount) != infcCount) {
            ChangeTeamScore(TEAM_INFECTED, SCORE_WINS, infcCount);
        }

        if(GetGameModeState() == GAMESTATE_INRESULTSEQUENCE) {
            if(Timer() < contingencyTimer() && infcCount == 0) { // if the alpha is just one and they suicide immediately, reset.
                ChangeTeamScore(TEAM_SURVIVOR, SCORE_WINS, 0);
                ChangeTeamScore(TEAM_INFECTED, SCORE_WINS, 0);
                SetGameModeLimit(GAMELIMIT_WINS, 0);
            } else {
                SetGameModeLimit(GAMELIMIT_WINS, max(survCount, infcCount));
            }

            if(survCount==0) { // If there are no survivors, no victory music. But maps should know the round ended.
                CallACS2("core_bossmusicstate", RBNZ_BMSF_SETVAL, RBNZ_BMS_VICTORY);
            }

            if(infcCount==0) {
                CallACS2("core_bossmusicstate", RBNZ_BMSF_SETVALMUS, RBNZ_BMS_VICTORY);
            }
            roboenzaMode = ROBOSTATE_END;
            terminate;
        }

        delay(1);
    }
}

script "RROBOENZ_PICKTIME" (void) { setResultValue(pickTime); }
script "RROBOENZ_MAXPLAYER" (void) { setResultValue(maxPlayer); }

script "ROBOENZ_GETPLAYERSCORE" (int pln) { SetResultValue(GetCustomPlayerValue("Infections", pln)); }
script "ROBOENZ_ADDPLAYERSCORE" (int pln) { SetCustomPlayerValue("Infections", pln, GetCustomPlayerValue("Infections", pln)+1); }

script "ROBOENZ_GETPLAYERSTRAIN" (int pln) { SetResultValue(GetCustomPlayerValue("Strain", pln)); }
script "ROBOENZ_ADDPLAYERSTRAIN" (int pln) { SetCustomPlayerValue("Strain", pln, GetCustomPlayerValue("Strain", pln)+1); }

script "ROBOENZ_GETMODESTATE" (void) { SetResultValue(roboenzaMode); }

script "RROBOENZ_SCORE_UNLOADING" UNLOADING
{
    if(GetCvar("roboenzafrenzy"))
        SetGameModeLimit(GAMELIMIT_WINS, 0);
}

world int WRLD_PATIENTZERO: patientsZero[];
int oldPatients[RBNZ_PLAYERLIMIT];
int oldPatientCount = 0;
int alphaCount = 0;

script "RROBOENZ_ALPHA_CONT_DEATH" DEATH
{
    CallACS1("RROBOENZ_ALPHA_CONTINGENCY", PlayerNumber());
}

script "RROBOENZ_ALPHA_CONTINGENCY" (int who) DISCONNECT
{
    if(!canRoboenza())
        terminate;

    if(getAlphaCount() > 1) { // only do this if there are more alphas than 1
        if(Timer() < contingencyTimer()) { // only do this if close to start of round
            int pz = findInPatientsZero(who);
            if(pz != -1 && playerCountTeam(TEAM_SURVIVOR) > 2) { // only do this if the player isn't already a patient zero, and there are 2 or more remaining survivors.
                int replace = pickAPlayerEx(RBNZ_PICK_SURVIVOR);
                while(replace == -1) {
                    replace = pickAPlayerEx(RBNZ_PICK_SURVIVOR);
                }
                patientsZero[pz] = replace;
                CallACS2("RROBOENZ_INFECT", replace, true);
            }
        }
    }
}

script "RROBOENZ_STRAIN_SPECTATE" (int who) DISCONNECT { CallACS1("RROBOENZ_CLEARDOWNLINES", who+1); }

function int contingencyTimer(void) {
    return pickTime + (35 * GetCvar("rroboenz_sv_alphacontingency"));
}

function void infectAlpha(int count) {
    // Log(s:"infectAlpha");

    // set the stage by ensuring survivor team can spare their infected member
    if(playerCountTeam(TEAM_INFECTED) > playerCountTeam(TEAM_SURVIVOR)) {
        SetActivator(findFirstTeamMember(TEAM_INFECTED) + PLN_TID);
        Player_SetTeam(TEAM_SURVIVOR, true);
    }

    // stage old data to array, then void it.
    oldPatientCount = getAlphaCount();

    // log( s:"count: ", i:count, s:" // oldPatientCount: ", i:oldPatientCount );
    for(int i = 0; i < oldPatientCount; i++) {
        oldPatients[i] = patientsZero[i];
        patientsZero[i] = 0;
    }

    if(count > 0) {
        while(alphaCount < count) {
            int who = pickAPlayer();
            if(who == -1) {
                Log(s:"This shouldn't have happened");
                return;
            } else {
                // Log(s:"Adding ", n:who+1, s:" to infection array.");
                patientsZero[alphaCount++] = who;
            }
        }
    }

    setAlphaCount(alphaCount);

    for(i = 0; i < alphaCount; i++) {
        CallACS3("RROBOENZ_INFECT", patientsZero[i], true, i * 20);
    }

    for(i = 0; i < maxPlayer; i++) {
        if(findInPatientsZero(i) == -1) {
            SetActivator(i + PLN_TID);
            Player_SetTeam(TEAM_SURVIVOR, true);
        }
    }

    SetActivator(-1);
    oldPatientCount = 0; // prevent rerolls from searching the temp staging array
    pickTime = timer();
}

function int findInPatientsZero(int n)
{
    for(int i = 0; i < alphaCount; i++) {
        if(patientsZero[i] == n) {
            return i;
        }
    }
    return -1;
}

function int findInOldPatients(int n)
{
    for(int i = 0; i < oldPatientCount; i++) {
        if(oldPatients[i] == n) {
            return i;
        }
    }
    return -1;
}

function int getAlphaCount(void) { return getCvar("rroboenz_temp_alphacount"); }
function void setAlphaCount(int count) { setCvar("rroboenz_temp_alphacount", count); }

function int pickAPlayer(void) {
    if(GetCvar("rroboenz_sv_alphaqueue"))
        return findNextPlayer();
    return pickAPlayerEx(0);
}

function int pickAPlayerEx(int flags)
{
    int target = -1;
    if(PlayerCount() == 2) { // handle the 1v1 scenario
        target = findFirstTeamMember(TEAM_INFECTED);
    } else {
        // choose a player who wasn't any of the last players, or any players staged
        int choice = random(1, countAlive() - oldPatientCount - alphaCount);

        for(int i = 0; i < maxPlayer; i++) {
            if(!PlayerInGame(i))
                continue;
            
            if(findInOldPatients(i) != -1)
                continue;

            if(findInPatientsZero(i) != -1)
                continue;

            if(flags & RBNZ_PICK_SURVIVOR)
                if(GetPlayerInfo(i, PLAYERINFO_TEAM) != TEAM_SURVIVOR)
                    continue;

            choice--;
            if(choice == 0) {
                target = i;
                break;
            }
        }
    }
    return target;
}

function int findFirstTeamMember(int team) {
    for(int i = 0; i < maxPlayer; i++) {
        if(PlayerInGame(i) && GetPlayerInfo(i, PLAYERINFO_TEAM) == team) {
            return i;
        }
    }
    return -1;
}

function int countAlive(void) {
    int ret = 0;
    for(int i = 0; i < maxPlayer; i++) {
        if(playerInGame(i))
            ret++;
    }
    return ret;
}

function int getCurrentRound(void) { return GetCvar("rroboenz_temp_roundnum"); }
function void setCurrentRound(int val) { SetCvar("rroboenz_temp_roundnum", val); }

function int getPlayerLastRound(int pln) { return GetCvar(StrParam(s:"rroboenz_temp_player", i:pln, s:"roundnum")); }
function void setPlayerLastRound(int pln, int val) { SetCustomPlayerValue("LastRound", pln, val); SetCvar(StrParam(s:"rroboenz_temp_player", i:pln, s:"roundnum"), val); }

function int getAlphaRange(void) { return GetCvar("rroboenz_sv_alpharand"); }

int connectLowest = 0;

script "rroboenz_roundcontroller" (int e, int who, int r) EVENT
{
    if(e == GAMEEVENT_LEVEL_INIT) {
        setCurrentRound(getCurrentRound() + 1);
    } else {
        if(connectLowest == 0)
            connectLowest = getLowestRound();
        
        connectLowest = max(connectLowest, getCurrentRound());

        if(e == GAMEEVENT_PLAYERCONNECT) setPlayerLastRound(who, connectLowest+random(0, getAlphaRange()));
        if(e == GAMEEVENT_PLAYERLEAVESSERVER) setPlayerLastRound(who, 0);
    }
}
script "rroboenz_getcurrentround" (void) { SetResultValue(getCurrentRound()); }

script "rroboenz_offlineplayer0queue" OPEN
{
    // I should not need to do this. But I do.
    // Zandronum does not run the GAMEEVENT_PLAYERCONNECT or GAMEEVENT_PLAYERDISCONNECT events on the player
    // if you're playing in offline skirmish.
    // But it does run, for bots.
    // I do not understand why this is the case.
    if(!IsNetworkGame()) {
        if(getPlayerLastRound(0) == 0) {
            Log(s:"Force-setting player 0's value.");
            CallACS3("rroboenz_roundcontroller", GAMEEVENT_PLAYERCONNECT, 0, 0);
        }
    }
}

function int getLowestRound(void)
{
    int ret = MAX_INT;
    for(int i = 0; i < MAX_PLAYERS; i++) {
        if(!playerInGame(i))
            continue;

        int r = getPlayerLastRound(i);
        // Log(n:i+1, s:"'s round is ", i:r);

        if(r < ret)
            ret = r;
    }

    return ret;
}

function int getHighestRound(void)
{
    int ret = MIN_INT;
    for(int i = 0; i < MAX_PLAYERS; i++) {
        if(!playerInGame(i))
            continue;

        int r = getPlayerLastRound(i);
        // Log(n:i+1, s:"'s round is ", i:r);

        if(r > ret)
            ret = r;
    }

    return ret;
}

int playerQueue[MAX_PLAYERS];
int playerQueueCount = 0;

function int findNextPlayer(void) {
    int low = getLowestRound();
    int high = getHighestRound();
    playerQueueCount = 0;

    for(int i = 0; i < MAX_PLAYERS; i++)
        if(getPlayerLastRound(i) == low)
            playerQueue[playerQueueCount++] = i;
    
    if(playerQueueCount == 0) {
        Log(s:"Low: ", i:low, s:" -- High: ", i:high);
        for(i = 0; i < MAX_PLAYERS; i++)
            if(playerInGame(i))
                Log(n:i+1, s:"' round is ", i:getPlayerLastRound(i));
        return -1;
    }
    
    int ret;
    if(playerQueueCount == 1)
        ret = playerQueue[0];
    else
        ret = playerQueue[random(0, playerQueueCount-1)];
    
    setPlayerLastRound(ret, high+random(0, getAlphaRange()));
    return ret;
}
