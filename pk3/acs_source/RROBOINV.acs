#library "RROBOINV"

#include "zcommon.acs"

#include "CROCFUNC.acs"
#include "RROBCOMM.acs"

#import "8BDT.acs"

int classHealth[RBNZ_PLAYERLIMIT];
#define FRENZY_BUFFSTACK_MAX 2
int frenzyFrags[FRENZY_BUFFSTACK_MAX] = {
    2, 5
};

int panicButtons[3] = {
    BT_RELOAD,
    BT_USE,
    BT_CROUCH
};
#define PANICBUTTON_OFFSET 2

bool itemsPulled = false;

int jumpSlot = -1;
int dashSlot = -1;
int flightSlot = -1;
int reloadSlot = -1;
int attackSlot = -1;
int giftSlot = -1;
int passiveSlot = -1;

script "RROBOENZ_LOADOUTBUILD" OPEN
{
    delay(2);
    if(canRoboenza()) {
        int roll;

        // Special item draw logic: roll for gift or attack type assist
        // You get an attacking assist, or Eddie in vanilla.
        roll = random(1, getAssistItemGroupCount(GRP_GIFT) + getAssistItemGroupCount(GRP_GIFT));
        if(roll <= getAssistItemGroupCount(GRP_ATTACK)) {
            attackSlot = randomAssistItemEx(GRP_ATTACK, true);
        } else {
            giftSlot = randomAssistItemEx(GRP_GIFT, true);
        }

        // Special item draw logic: roll for gift or attack type assist
        // You get any mobility item from vanilla.
        roll = random(1, getAssistItemGroupCount(GRP_JUMP) + getAssistItemGroupCount(GRP_DASH) + getAssistItemGroupCount(GRP_FLIGHT));
        if(roll <= getAssistItemGroupCount(GRP_JUMP)) {
            dashSlot = randomAssistItemEx(GRP_JUMP, true);
        } else if(roll <= getAssistItemGroupCount(GRP_DASH)) {
            jumpSlot = randomAssistItemEx(GRP_DASH, true);
        } else {
            flightSlot = randomAssistItemEx(GRP_FLIGHT, true);
        }

        reloadSlot = randomAssistItemEx(GRP_RELOAD, true);
        passiveSlot = randomAssistItemEx(GRP_PASSIVE, true);
        itemsPulled = true;
    }
}

// Inventory management scripts, for infects and survivors.
script "RROBENZ_PLAYERSTART" (void)
{
    classHealth[PlayerNumber()] = GetActorProperty(0, APROP_SpawnHealth);
    GiveInventory("NoTeamTranslation", 1);
    GiveInventory("NoProjectileTeamTranslation", 1);
    CallACS0("RROBENZ_SURVIVORMANAGE");

    // i do not think this will be looked upon kindly
    // but also, i do not want to replace COLOTRNS.acs
    str weap = GetWeapon();
    if(StrCmp(weap, "None") != 0) {
        CSetInventory(weap, 0);
        GiveInventory(weap, 1);
        SetWeapon(weap);
        until(CheckWeapon(weap)) {
            delay(1);
            SetWeapon(weap);
        }
    }

    until(CheckInventory("LightTeamFlag") > 0 ||
          CheckInventory("WilyTeamFlag") > 0 ||
          CheckInventory("CossackTeamFlag") > 0 ||
          CheckInventory("KingTeamFlag") > 0)
        delay(1);

    TakeInventory("LightTeamFlag", 1);
    TakeInventory("WilyTeamFlag", 1);
    TakeInventory("CossackTeamFlag", 1);
    TakeInventory("KingTeamFlag", 1);
}

script "RROBENZ_SURVIVORMANAGE" (void)
{
    int pln = PlayerNumber();
    CallACS0("RROBOENZ_REVOKEZOMBIESKIN");

    until(itemsPulled)
        delay(1);

    // Eddie?
    if(giftSlot!=-1)
        GiveInventory(getAssistItemActor(giftSlot), getAssistItemAmount(giftSlot));
    
    // W-Tank?
    if(reloadSlot!=-1)
        GiveInventory(getAssistItemActor(reloadSlot), 3); // this is likely gonna be just W-Tanks anyway.

    // Mobility
    if(jumpSlot!=-1)
        GiveInventory(getAssistItemActor(jumpSlot), max(3, getAssistItemAmount(jumpSlot)));
    if(dashSlot!=-1)
        GiveInventory(getAssistItemActor(dashSlot), max(3, getAssistItemAmount(dashSlot)));
    if(flightSlot!=-1)
        GiveInventory(getAssistItemActor(flightSlot), max(3, getAssistItemAmount(flightSlot)));
    
    // Bonus attack
    if(attackSlot!=-1)
        GiveInventory(getAssistItemActor(attackSlot), getAssistItemAmount(attackSlot));
    
    // Energy Balancer?
    if(passiveSlot!=-1)
        GiveInventory(getAssistItemActor(passiveSlot), getAssistItemAmount(passiveSlot));

    int oldFrags = GetPlayerScore(pln, SCORE_FRAGS);
    int startFrags = oldFrags;
    int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
    int oldButtons = GetPlayerInput(-1, INPUT_OLDBUTTONS);

    while(GetActorProperty(0, APROP_Health) > 0 && CheckInventory("RoboenzaInfected") == 0) {
        if(oldFrags != GetPlayerScore(pln, SCORE_FRAGS)) {
            oldFrags = GetPlayerScore(pln, SCORE_FRAGS);
            int diff = oldFrags - startFrags;

            while(CheckInventory("FrenzyBuffCount") < FRENZY_BUFFSTACK_MAX && diff >= frenzyFrags[CheckInventory("FrenzyBuffCount")])
            {
                GiveInventory("FrenzyBuffCount", 1);
                giveFrenzyBuff(pln);
            }
        }

        int btn = GetUserCvar(pln, "rroboenz_panicbutton");
        if(btn >= PANICBUTTON_OFFSET) {
            if((buttons & panicButtons[btn-PANICBUTTON_OFFSET]) && !(oldButtons & panicButtons[btn-PANICBUTTON_OFFSET])) {
                CallACS0("RROBOENZ_PANICBUTTON");
            }
        }
        
        delay(1);

        oldButtons = buttons;
        buttons = GetPlayerInput(-1, INPUT_BUTTONS);
    }
}

script "RROBOENZ_GIVEFRENZY" (void) {
    int maxPlr = CallACS0("RROBOENZ_MAXPLAYER");
    for(int i = 0; i < maxPlr; i++) {
        if(GetPlayerInfo(i, PLAYERINFO_TEAM) == TEAM_SURVIVOR) {
            giveFrenzyBuff(i);
            giveSurvivalItems(i);
        }
    }
}

function void giveFrenzyBuff(int pln) {
    if(GetUserCvar(pln, "rroboenz_autofrenzy")) {
        GiveActorInventory(pln + PLN_TID, "FrenzyBuff", 1);
    } else {
        GiveActorInventory(pln + PLN_TID, "FrenzyBuffItem", 1);
    }
}

function void giveSurvivalItems(int pln) {
    GiveActorInventory(pln + PLN_TID, getAssistItemActor(reloadSlot), 3);
    GiveActorInventory(pln + PLN_TID, "ExitUnitItem", 1);
}

script "RROBOENZ_FRENZYBUFF" (int to) {
    int from = CheckInventory("FrenzyBuffStack");
    if(from >= FRENZY_BUFFSTACK_MAX)
        terminate;

    if(to == 0) {
        to = from+1;
    }

    switch(from) {
        case 1:
            CallACS3("core_runeplayer", 0, false, RUNE_RAGE);
            break;
        case 2:         
            CallACS3("core_runeplayer", 0, false, RUNE_SPREAD);
            break;
    }

    switch(to) {
        default:
        case 1:
            CallACS3("core_runeplayer", 0, true, RUNE_RAGE);
            CallACS2("RROBOENZ_ALERT", PlayerNumber(), MSG_ENRAGED);
            break;
        case 2:          
            CallACS3("core_runeplayer", 0, true, RUNE_SPREAD);
            CallACS2("RROBOENZ_ALERT", PlayerNumber(), MSG_BERSERK);
            break;
    }
    CSetInventory("FrenzyBuffStack", to);
}

script "RROBOENZ_PANICBUTTON" (void) NET CLIENTSIDE
{
    if(PlayerNumber() != ConsolePlayerNumber())
        terminate;
    
    if(CheckInventory("ExitUnitItem") > 0) {
        ConsoleCommand("Use ExitUnitItem");
        terminate;
    }

    if(CheckInventory("FrenzyBuffItem") > 0) {
        ConsoleCommand("Use FrenzyBuffItem");
        terminate;
    }
}

script "RROBOENZ_INFECT" (int who, int alpha)
{
    SetActivator(who + PLN_TID);
    Player_SetTeam(TEAM_INFECTED, true);
    CallACS1("core_hazardtag_clear", who);
    removeAssists();
    CallACS0("RROBOENZ_APPLYZOMBIESKIN");

    CSetInventory("FrenzyBuffStack", 0);
    CSetInventory("FrenzyBuffCount", 0);
    GiveInventory("RoboenzaInfected", 1);
    SetAmmoCapacity("RoboenzaTimer", ZOMBIE_TIME);
    GiveInventory("RoboenzaTimer", ZOMBIE_TIME);
    GiveInventory("RoboenzaWep", 1);
    SpawnSpotForced("InfectionEffect", 0, 0, 0);
    Thing_SetTranslation(0, CLR_INFECTED);
    SetActorVelocity(0, 0, 0, 0, 0, 0);
    GiveInventory("RoboenzaGoreWatcherStart_P", 1);
    CallACS0("ROBOENZ_TRANSFORMFREEZE");
    SetWeapon("RoboenzaWep");
    str weap = GetWeapon();
    TakeInventory(weap, 1);
    GiveInventory(weap, 1);
    CallACS1("core_poss_runfuncs", who);

    int zombieHealth = ZOMBIE_HP_BASE;
    int infectCount = playerCountTeam(TEAM_INFECTED);

    if(!alpha) {
        CallACS0("RROBOENZ_ALPHADISABLE");
        zombieHealth = ZOMBIE_HP_START + (PlayerCount() * ZOMBIE_HP_MIN - infectCount * ZOMBIE_HP_MAX);
        if(zombieHealth < ZOMBIE_HP_MIN) zombieHealth = ZOMBIE_HP_MIN;
        if(zombieHealth > ZOMBIE_HP_MAX) zombieHealth = ZOMBIE_HP_MAX;
    } else {
        GiveInventory("RoboenzaDontRip", 1);
        GiveInventory("RoboenzaAlphaInfected", 1);
        GiveInventory("RoboenzaGhostStart_P", 1);
    }

    zombieHealth = zombieHealth/3 + zombieHealth;

    setRoboenzaHealth(0, zombieHealth);

    CallACS2("RROBOENZ_ALERT", who, MSG_INFECTED);
    CallACS2("RROBOENZ_TOOLTIP", zombieHealth, alpha);

    CallACS0("RROBOENZ_MANAGEINFECTED");
}

script "RROBOENZ_MANAGEINFECTED" (void)
{
    int timeStart = Timer()-1;
    int pln = PlayerNumber();
    int oldVelZ = GetActorVelZ(0);
    bool onTheGround = true;

    while(GetActorProperty(0, APROP_Health) > 0 && CheckInventory("RoboenzaInfected") > 0)
    {
        int infectTime = timeStart - Timer();

        if(infectTime % 35 == 0) { // Tick down the timer
            TakeInventory("RoboenzaTimer", 1);
            if(CheckInventory("RoboenzaTimer") == 0) {
                int tid = ActivatorTID();
                SetActivator(-1);
                Thing_Damage(tid, 5000, MOD_SLIME);
                terminate;
            }
        }

        if(infectTime % (35 * 3) == 0) { // Gradual health regen
            if(GetActorProperty(0, APROP_HEALTH) < GetActorProperty(0, APROP_SPAWNHEALTH)) {
                HealThing(clamp(getCvar("sv_maxlives") * 5, 5, 30) + playerCountTeam(TEAM_SURVIVOR));
            }
        }

        // Enforce bots having the zombie weapon.
        if(PlayerIsBot(pln)) {
            if(!CheckWeapon("RoboenzaWep"))
                SetWeapon("RoboenzaWep");
        }

        // Inventory bar-style timer. Doesn't work for spectators.
        if(GetUserCvar(pln,"rroboenz_timerbar") == 3) {
            CSetInventory("RoboenzaTimerInvBar", CheckInventory("RoboenzaTimer"));
        } else {
            CSetInventory("RoboenzaTimerInvBar", 0);
        }

        if(CheckInventory("RoboenzaAlphaInfected")) {
            int btn = GetPlayerInput(-1, INPUT_BUTTONS);
            if(((btn & BT_FORWARD) || (btn & BT_BACK) || (btn & BT_MOVELEFT) || (btn & BT_MOVERIGHT)) && (GetActorVelX(0) != 0 || GetActorVelY(0) != 0)) {
                GiveInventory("InfectedWalking", 1);
            }
        }

        // Custom landing sound logic.
        if(oldVelZ < 0 && GetActorVelZ(0) == 0.0) {
            if(GetActorZ(0) <= GetActorFloorZ(0)) {
                if(oldVelZ <= -8.24) {
                    StopSound(0, CHAN_AUTO);
                    PlaySound(0, "rroboenza/player/land", CHAN_7);
                }
            } else {
                if(CallACS0("core_CheckFooting")) {
                    if(oldVelZ <= -8.24) {
                        StopSound(0, CHAN_AUTO);
                        PlaySound(0, "rroboenza/player/land", CHAN_7);
                    }
                }
            }
        }

        oldVelZ = GetActorVelZ(0);

        // Recoil delay.
        if(CheckInventory("InfectRecoilTime") > 0)
            TakeInventory("InfectRecoilTime", 1);

        delay(1);
    }
}

script "RROBOENZ_INFECTDROPS" DEATH
{
    if(CheckInventory("RoboenzaInfected") > 0) {
        GiveInventory("InfectedDrops", 1);
        
        int infectCount = playerCountTeam(TEAM_INFECTED);
        if(infectCount >= 3) {
            int cureRoll = random(1, 100);
            // Cure chance: +5 per 3 players, up to 20%
            int infectChance = clamp(10, (5*infectCount/3) + 5, 20);
            // Cure chance: ramps up to +5, based on timer loss
            int timerChance = FixedMul(FixedDiv(ZOMBIE_TIME - CheckInventory("RoboenzaTimer"), ZOMBIE_TIME), 5.0) >> 16;

            if(cureRoll < (infectChance + timerChance)) {
                SpawnSpotForced("RoboenzaCure", 0, 0, 0);
            }
        }
    }
}

// Handles the ER ghost that follows patient zero.
script "RROBOENZ_GHOSTWARPER" (void) CLIENTSIDE
{
	int Player = ACS_NamedExecuteWithResult("core_gettarget",0);
	
	// Loop if shield is active
	while(GetActorProperty(Player, APROP_HEALTH)>0
	&& CheckActorInventory(Player, "RoboenzaAlphaInfected") > 0
	){
		Delay(1);
	}

	// Remove
	SetActorState(0, "Fade");
}

script "RROBOENZ_ALPHADISABLE" (void)
{
    SetActivator(-1);
    int maxPlayer = CallACS0("RROBOENZ_MAXPLAYER");
    for(int i = 0; i < maxPlayer; i++) {
        if(PlayerInGame(i)) {
            if(CheckActorInventory(i + PLN_TID, "RoboenzaAlphaInfected") > 0) {
                TakeActorInventory(i + PLN_TID, "RoboenzaAlphaInfected", 1);
                GiveActorInventory(i + PLN_TID, "RoboenzaDoRip", 1);
            }
        }
    }
}

Script "RROBOENZ_HEALTHSPEND" (void)
{
	Int ActorHealth = GetActorProperty(ActivatorTID(), APROP_Health);
	If(ActorHealth > 15)
	{
		SetActorProperty(ActivatorTID(), APROP_Health, ActorHealth-15);
	}
}

script "RROBOENZ_CURE" (void)
{
    int who = PlayerNumber();

    CSetInventory("RoboenzaDoRip", 1);
    CSetInventory("RoboenzaAlphaInfected", 0);
    CSetInventory("RoboenzaInfected", 0);
    CSetInventory("RoboenzaTimer", 0);
    CSetInventory("RoboenzaWep", 0);
    returnAssists();
    giveSurvivalItems(who);
    SpawnSpotForced("RoboenzaCureEffect", 0, 0, 0);

    SetActorVelocity(0, 0, 0, 0, 0, 0);
    CallACS2("core_freezeplayer", 0, true);
    CallACS0("ROBOENZ_TRANSFORMFREEZE");
    CallACS1("core_poss_runfuncs", who);

    setRoboenzaHealth(0, classHealth[who]);

    CallACS2("RROBOENZ_ALERT", who, MSG_CURED);
    
    Player_SetTeam(TEAM_SURVIVOR, true);
    CallACS1("core_hazardtag_clear", who);

    CallACS0("RROBENZ_SURVIVORMANAGE");
}

script "ROBOENZ_TRANSFORMFREEZE" (void) {
    delay(1);
    CallACS2("core_freezeplayer", 0, true);
    delay(FREEZE_TIME);
    CallACS2("core_freezeplayer", 0, false);
}

// DAMAGE EVENT (for zombie recoil and infection)
script "RROBOENZ_DAMAGEEVENT" (int ev, int dmg, int type) EVENT
{
    if(ev == GAMEEVENT_ACTOR_DAMAGED) {
        int pln = PlayerNumber();
        if(pln >= 0) {
            dmg = GetEventResult();

            if(CheckInventory("RoboenzaInfected")) {

                GiveInventory("InfectRecoil", 1);

            } else {
                if(dmg > 0 && StrICmp(type, "RoboenzaInfection") == 0) {

                    int hp = GetActorProperty(0, APROP_Health);
                    SetActivator(0, AAPTR_DAMAGE_SOURCE);

                    if(dmg >= hp) { // if the scratch kills, add health and time.
                        GiveInventory("RoboenzaTimer", 20);
                        HealThing(20);
                    } else {
                        CallACS1("RROBOENZ_INFECT", pln);
                        CallACS1("ROBOENZ_ADDPLAYERSCORE", PlayerNumber());
                    }
                }
            }
        }
    }
}

// INVENTORY SLOT MANAGEMENT
int playerInventory[RBNZ_PLAYERLIMIT][MAX_ITEMS_GLOBAL_LIMIT];

function void removeAssists(void) {
    int plr = PlayerNumber();
    CSetInventory("FrenzyBuffItem", 0);
    for(int i = 0; i < MAX_ITEMS_GLOBAL; i++) {
        str inv = getAssistItemActor(i);
        int cnt = CheckInventory(inv);
        if(cnt > 0) {
            playerInventory[plr][i] = cnt;
            CSetInventory(inv, 0);
        }
    }
}

function void returnAssists(void) {
    int plr = PlayerNumber();
    for(int i = 0; i < MAX_ITEMS_GLOBAL; i++) {
        if(playerInventory[plr][i] > 0) {
            CSetInventory(getAssistItemActor(i), playerInventory[plr][i]);
        }
    }
}


