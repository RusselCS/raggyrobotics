#define PLN_TID 1000
#define MAX_PLAYERS 64

#define RUNE_STRENGTH 0
#define RUNE_RAGE 1
#define RUNE_DRAIN 2
#define RUNE_SPREAD 3
#define RUNE_RESISTANCE 4
#define RUNE_REGENERATION 5
#define RUNE_PROSPERITY 6
#define RUNE_REFLECTION 7
#define RUNE_HIGHJUMP 8
#define RUNE_HASTE 9

#define GRP_JUMP		0
#define GRP_DASH		1
#define GRP_FLIGHT		2
#define GRP_WEAPON		3
#define GRP_GIFT		4
#define GRP_ATTACK		5
#define GRP_ESCAPE		6
#define GRP_HEAL		7
#define GRP_RELOAD		8
#define GRP_FULLRESTORE 9
#define GRP_PASSIVE		10

// Script wrappers
function int CallACS0(str scr) { return CallACS4(scr, 0, 0, 0, 0); }
function int CallACS1(str scr, int a1) { return CallACS4(scr, a1, 0, 0, 0); }
function int CallACS2(str scr, int a1, int a2) { return CallACS4(scr, a1, a2, 0, 0); }
function int CallACS3(str scr, int a1, int a2, int a3) { return CallACS4(scr, a1, a2, a3, 0); }
function int CallACS4(str scr, int a1, int a2, int a3, int a4) { return ACS_NamedExecuteWithResult(scr, a1, a2, a3, a4); }

// Player number functions
function bool isPlayerPln(int id) { return id > -1 && id < MAX_PLAYERS; }
function bool isPlayerTID(int id) { return id >= PLN_TID && id < PLN_TID+MAX_PLAYERS; }

// Math functions
function int solveForX(int y, int m, int b) { return FixedDiv((y-b), m); }

// String functions
function bool StrEqual(str str1, str str2) { return StrCmp(str1, str2) == 0; }
function bool StrMatches(str str1, str str2) { return StrICmp(str1, str2) == 0; }

// Actor functions
function void setActorPointer(int who, int ptr, int tid) { CallACS3("rr_setptr", who, ptr, tid); }

function int getClassProperty(str act, int prop)
{
    int u = UniqueTID();
    SpawnForced(act, 0, 0, 0, u, 0);
    int ret = GetActorProperty(u, prop);
    Thing_Remove(u);
    return ret;
}

function void CSetInventory(str inventory_item, int amount)
{
CSetInventory2(inventory_item,amount,CheckInventory(inventory_item));
}

function void CSetInventory2(str inventory_item, int amount, int currentamount)
{
if(amount>currentAmount) GiveInventory(inventory_item,amount-currentAmount);
else if(amount<currentAmount) TakeInventory(inventory_item,currentAmount-amount);
}

function void CSetActorInventory(int tid, str inventory_item, int amount)
{
CSetActorInventory2(tid,inventory_item,amount,CheckActorInventory(tid,inventory_item));
}

function void CSetActorInventory2(int tid, str inventory_item, int amount, int currentamount)
{
if(amount>currentAmount) {
	GiveActorInventory(tid,inventory_item,amount-currentAmount);
} else if(amount<currentAmount) {
	TakeActorInventory(tid,inventory_item,currentAmount-amount);
}
}

function int getPlnFromTid(int tid)
{
	int pln = tid-PLN_TID;

	if(pln >= 0 && pln < MAX_PLAYERS)
		return pln;
	
	return -1;
}

function int checkPlayerCameraPln(int pln)
{
	return getPlnFromTid(CheckPlayerCamera(pln));
}

function void BasicTextDisplay(str font, str text, int id, int x, int y)
{
BasicTextDisplay2(font, text, id, x, y, 0.1, 1.0);
}

function void BasicTextDisplay2(str font, str text, int id, int x, int y, int holdtime, int alpha)
{
SetFont(font);
HudMessageBold(s:text;HUDMSG_PLAIN,id,CR_UNTRANSLATED,x,y,holdtime,alpha);
}

function str getInput(str cmd, int idx)
{
	str s = StrParam(k:cmd);

	if(GetChar(s, 0) == '?')
		return "NO BIND";
	
	return s;

	// Reserving this code for later. Turns out there's an "OR" here, not a comma.
	//
	// if(idx == -1)
	// 	return s;
	
	// int pos = findChar(s, ',', 0);
	// if(pos == -1)
	// 	return s;
	
	// if(idx == 0)
	// 	return StrLeft(s, pos);
	// return StrRight(s, StrLen(s)-pos);
}

function int findChar(str s, int c, int start)
{
	int end = strlen(s);
	for(int i = start; i < end; i++) {
		if(getChar(s, i) == c)
			return i;
	}
	return -1;
}

// Fake message items.
#define MAX_COLORS 22
str textColors[22] = {
	"\ca", "\cb", "\cc", "\cd", "\ce",
	"\cf", "\cg", "\ch", "\ci", "\cj",
	"\ck", "\cl", "\cm", "\cn", "\co",
	"\cp", "\cq", "\cr", "\cs", "\ct",
	"\cu", "\cv"
};

str messageLevelCVars[6] = {
	"msg0color",
	"msg1color",
	"msg2color",
	"msg3color",
	"msg4color",
	"msg5color"
};

#define ML_ITEM_PICKUP 0
#define ML_OBITUARIES  1
#define ML_CRITICAL_MESSAGES 2
#define ML_CHAT_MESSAGES 3
#define ML_TEAM_MESSAGES 4
#define ML_PRIVATE_MESSAGES 5

function str colorIdToCode(int clrId) {
	if(clrId < 0 || clrId >= MAX_COLORS)
		return "\c-";
	
	return textColors[clrId];
}

function str messageTypeToColorCode(int msgLevel) {
	return textColors[GetCVar(messageLevelCVars[msgLevel])];
}

function void sendSystemMessage(str msg, int msgLevel) { CallACS2("crocui_systemmessage", msg, msgLevel); }
script "crocui_systemmessage" (int msg, int msgLevel) CLIENTSIDE { systemMessage(msg, msgLevel); }

function void systemMessage(str msg, int msgLevel) {
	if(msgLevel < getCvar("msg"))
		terminate;
	
	// You need to format the message yourself. There's too much wackery with the color rules.
	Log(s:msg);
}
